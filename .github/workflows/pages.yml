name: Deploy Frontend to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Inject API URL
        run: |
          API="${{ secrets.VITE_API_URL }}"
          API="${API%/}"
          echo "VITE_API_URL=$API" > .env.production

      - name: Build
        run: npm run build -- --base=/${{ github.event.repository.name }}/

      - name: Rewrite /api/ to absolute API in built assets
        env:
          API: ${{ secrets.VITE_API_URL }}
        run: |
          API="${API%/}"
          node -e "const fs=require('fs'),g=require('glob');const A=process.env.API.replace(/\/+$/,'');const files=[...g.sync('dist/**/*.js'),...g.sync('dist/**/*.html'),...g.sync('dist/**/*.css')];for(const f of files){let s=fs.readFileSync(f,'utf8');s=s.replace(/fetch\(\s*['\"]\/api\//g,'fetch(\"'+A+'/api/');s=s.replace(/([\"'=])\/api\//g,'$1'+A+'/api/');fs.writeFileSync(f,s);}"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
