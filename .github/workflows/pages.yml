name: Deploy Frontend to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Inject API URL
        run: |
          API="${{ secrets.VITE_API_URL }}"
          API="${API%/}"
          echo "VITE_API_URL=$API" > .env.production

      - name: Build
        run: npm run build -- --base=/${{ github.event.repository.name }}/

      - name: Rewrite /api/ to absolute API in built assets
        env:
          API: ${{ secrets.VITE_API_URL }}
        run: |
          API="${API%/}"
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const root = 'dist';
          const API = (process.env.API || '').replace(/\/+$/,'');
          function walk(dir) {
            for (const ent of fs.readdirSync(dir, { withFileTypes: true })) {
              const p = path.join(dir, ent.name);
              if (ent.isDirectory()) walk(p);
              else if (/\.(js|html|css)$/.test(ent.name)) {
                let s = fs.readFileSync(p, 'utf8');
                s = s.replace(/fetch\(\s*(['"])\s*\/api\//g, (_m, q) => `fetch(${q}${API}/api/`);
                s = s.replace(/([="'\s\(])\/api\//g, (_m, pre) => `${pre}${API}/api/`);
                fs.writeFileSync(p, s);
              }
            }
          }
          walk(root);
          NODE

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
